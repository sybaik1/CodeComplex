{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": "9,     97,    101,    103,    107,    109,    113,\n                127,    131,    137,    139,    149,    151,    157,    163,    167,    173,\n                179,    181,    191,    193,    197,    199,    211,    223,    227,    229,\n                233,    239,    241,    251,    257,    263,    269,    271,    277,    281,\n                283,    293,    307,    311,    313,    317,    3"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "ERROR", "responce": " 1] = a[j];\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t\ta[j + 1] = current;\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\tvoid solve() throws ioexception {\n\t\tint n = readint();\n\t\tint[] a = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t\ta[i] = readint();\n\t\tmergesort.sort(a);\n\t\tint ans = 0;\n\t\tboolean[] b = new boolean[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (!b[i]) {\n\t\t\t\tb[i] = true;\n\t\t\t\tans++;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (a[j] % a[i] == 0)\n\t\t\t\t\t\tb[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.print(ans);\n\t}\n\t\n}\n\n----------------------------------------\ncalculate the time complexity of the given code.\nplease output the time complexity of the whole code in a json format.\njson format should be\n{\n    \"complexity\": time complexity of the whole code,\n}.\n\ncomplexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "ERROR", "responce": "1, int s2)\n    {\n        int p1=this.find(s1);\n        int p2=this.find(s2);\n\n        if(p1==p2)\n            return;\n        if(rank[p1]>rank[p2])\n        {\n            parent[p2]=p1;\n            rank[p1]+=rank[p2];\n        }\n        else\n        {\n            parent[p1]=p2;\n            rank[p2]+=rank[p1];\n        }\n    }\n\n\n}\n\n----------------------------------------\njson output format should be\n{\n    \"complexity\": time complexity of the whole code,\n}.\n\ncomplexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "NO RESPONCE", "responce": "iterator() {\n                private int at;\n                private boolean removed;\n\n                public int value() {\n                    if (removed) {\n                        throw new illegalstateexception();\n                    }\n                    return get(at);\n                }\n\n                public boolean advance() {\n                    at++;\n                    removed = false;\n                    return isvalid();\n                }\n\n                public boolean isvalid() {\n                    return!removed && at < size();\n                }\n\n                public void remove() {\n                    removeat(at);\n                    at--;\n                    removed = true;\n                }\n            };\n        }\n    }\n    static class query {\n        int left;\n        int right;\n        int k;\n        int index;\n        int block;\n        int res;\n\n        public query(int left, int right, int k, int index) {\n            this.left = left;\n            this.right = right;\n            this.k = k;\n            this.index = index;\n        }\n    }\n    static interface intstream extends iterable<integer>, comparable<intstream> {\n        public intiterator intiterator();\n        default public iterator<integer> iterator() {\n            return new iterator<integer>() {\n                private intiterator it = intiterator();\n\n                public boolean hasnext() {\n                    return it.isvalid();\n                }\n\n                public integer next() {\n                    int result = it.value"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": ";\n\t\tm = m;\n\t\ts = s;\n\t\tw = w;\n\t\tb = b;\n\t\tmap = new hashmap<character,integer>();\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\tfor(int k=0;k<c.length;k++) {\n\t\t\t\t\tif(s[i][j]==c[k])map.put(c[k],toint(i,j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tint toint(int i,int j) {\n\t\treturn i*m+j;\n\t}\n\t\n\tvoid bfs(int u,queue<integer> q,treeset<integer> set,hashmap<integer,integer> num,hashmap<integer,integer> first,hashmap<integer,integer> next) {\n\t\tint[] dist = new int[n*m];\n\t\tarrays.fill(dist, -1);\n\t\tdist[u] = 0;\n\t\twhile(!q.isempty()) {\n\t\t\tint v = q.poll();\n\t\t\tset.remove(v);\n\t\t\tint x = v%m;\n\t\t\tint y = v/n;\n\t\t\tfor(int i=0;i<4;i++) {\n\t\t\t\tint nx = x+dx[i];\n\t\t\t\tint ny ="}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": " = 0; bit < n; ++bit){\n\t\t\t\tif (checkbit(mask, bit)) continue;\n\t\t\t\t\n\t\t\t\tint nmask = setbit(mask, minbit) | setbit(mask, bit);\n\t\t\t\t\n\t\t\t\tif (dp[nmask] > dp[mask] + d[minbit][bit]){\n\t\t\t\t\tdp[nmask] = dp[mask] + d[minbit][bit];\n\t\t\t\t\tp[nmask] = minbit * n + bit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.println(dp[lim - 1]);\n\t\t\n\t\tint mask = lim - 1;\n\t\t\n\t\tarraylist<integer> res = new arraylist<integer>();\n\t\t\n\t\twhile (mask > 0){\n\t\t\tint m = p[mask];\n\t\t\tint i = m / n;\n\t\t\tint j = m % n;\n\t\t\t\n\t\t\tres.add(i + 1);\n\t\t\tres.add(j + 1);\n\t\t\t\n\t\t\tmask = mask - (1 << i) - (1 << j);\n\t\t}\n\t\t\n\t\tres.add(0);\n\t\t\n\t\tfor (int i = res.size() - 1; i >= 0; --i){\n\t\t\tout.print(res.get"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "NO RESPONCE", "responce": " system.currenttimemillis();\n\t\tsolve();\n\t\tout.flush();\n\t\ttr(system.currenttimemillis()-s+\"ms\");\n\t}\n\t\n\tpublic static void main(string[] args) throws exception { new g().run(); }\n\t\n\tprivate byte[] inbuf = new byte[1024];\n\tpublic int lenbuf = 0, ptrbuf = 0;\n\t\n\tprivate int readbyte()\n\t{\n\t\tif(lenbuf == -1)throw new inputmismatchexception();\n\t\tif(ptrbuf >= lenbuf){\n\t\t\tptrbuf = 0;\n\t\t\ttry { lenbuf = is.read(inbuf); } catch (ioexception e) { throw new inputmismatchexception(); }\n\t\t\tif(lenbuf <= 0)return -1;\n\t\t}\n\t\treturn inbuf[ptrbuf++];\n\t}\n\t\n\tprivate boolean isspacechar(int c) { return!(c >= 33 && c <= 126); }\n\tprivate int skip() { int b; while((b = readbyte())!= -1 && isspacechar(b)); return b; }\n\t\n\tprivate double nd() { return double.parsedouble(ns()); }\n\tprivate char nc() { return (char)skip(); }\n\t\n\tprivate string"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "NO RESPONCE", "responce": "    }\n\n    /////////////////////////////////////////////////////////////////////\n\n    private boolean checkbit(int mask, int bit){\n        return (mask & (1 << bit))!= 0;\n    }\n\n    private int uncheckedbitcount(int mask){\n        int res = 0;\n        while (mask!= 0){\n            mask &= mask - 1;\n            ++res;\n        }\n        return res;\n    }\n\n    private void reverse(int[] a){\n        for (int i = 0; i < a.length / 2; ++i){\n            swap(a, i, a.length - 1 - i);\n        }\n    }\n\n    private void swap(int[] a, int i, int j){\n        int t = a[i];\n        a[i] = a[j];\n        a[j] = t;\n    }\n\n    /////////////////////////////////////////////////////////////////////\n\n    private long timebegin, timeend;\n\n    private void timeinit(){\n        timeend = 0;\n        timebegin = system.currenttimemillis();\n    }\n\n    private void time(){\n        timeend = system.currenttimemillis();\n        system.err.println(\"time = \" + (timeend - timebegin) + \" ms\");\n    }\n\n    /////////////////////////////////////////////////////////////////////\n\n    private boolean hasnext(){\n        while (!tok.has"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "cubic", "responce": "\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t}else{\n\t\t\t\treturn minus? -num : num;\n\t\t\t}\n\t\t\tb = readbyte();\n\t\t}\n\t}\n\t\n\tprivate long nl()\n\t{\n\t\tlong num = 0;\n\t\tint b;\n\t\tboolean minus = false;\n\t\twhile((b = readbyte())!= -1 &&!((b >= '0' && b <= '9') || b == '-'));\n\t\tif(b == '-'){\n\t\t\tminus = true;\n\t\t\tb = readbyte();\n\t\t}\n\t\t\n\t\twhile(true){\n\t\t\tif(b >= '0' && b <= '9'){\n\t\t\t\tnum = num * 10 + (b - '0');\n\t\t\t}else{\n\t\t\t\treturn minus? -num : num;\n\t\t\t}\n\t\t\tb = readbyte();\n\t\t}\n\t}\n\t\n\tprivate boolean oj = system.getproperty(\"online_judge\")!= null;\n\tprivate void tr(object... o) { if(!oj)system.out.println(arrays.deeptostring(o)); }\n}\n\n----------------------------------------\njson output:\n{\n    \"complexity\": \"cubic\"\n}\n----------------------------------------\nimport java.io.*;\nimport java.util.*;\n\npublic class main {\n"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "NO RESPONCE", "responce": "] = temp; \n\t\t    start++; \n\t\t    end--; \n\t\t}  \n\t}  \n\tstatic boolean isprime(int n)\n\t{\n\t    if (n <= 1)\n\t        return false;\n\t    if (n <= 3)\n\t        return true;\n\t    if (n % 2 == 0 || n % 3 == 0)\n\t        return false;\n\t \n\t    for (int i = 5; i * i <= n; i = i + 6)\n\t        if (n % i == 0 || n % (i + 2) == 0)\n\t           return false;\n\t \n\t    return true;\n\t}\n\tstatic long nc3(long a) {\n\t\treturn a*(a-1)*(a-2);\n\t}\n\tstatic boolean isperfectsquare(long l)\n\t{\n\t    long h = (long)math.sqrt(l);\n\t    if(h * h == l)\n\t        return true;\n\t    return false;\n\t}\n\tstatic int sum(int x)\n\t{\n\t    return (x * (x + 1)) / 2; \n\t}\n\tstatic int[] countder(int n)\n\t{\n\t    int der[] = new int[n + 1]; \n\t    der["}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "NO RESPONCE", "responce": " >= 1000000) return 7;\n            if (l >= 100000) return 6;\n            if (l >= 10000) return 5;\n            if (l >= 1000) return 4;\n            if (l >= 100) return 3;\n            if (l >= 10) return 2;\n            return 1;\n        }\n\n        private fastwriter write(int x) {\n            if (x == integer.min_value) {\n                return write((long) x);\n            }\n            if (isfirst) {\n                isfirst = false;\n            } else {\n                write(' ');\n            }\n            if (x < 0) {\n                write((byte) '-');\n                x = -x;\n            }\n            int d = countdigits(x);\n            for (int i = ptr + d - 1; i >= ptr; i--) {\n                buf[i] = (byte) ('0' + x % 10);\n                x /= 10;\n            }\n            ptr = i + 1;\n            return this;\n        }\n\n        private fastwriter write(long x) {\n            if (isfirst)"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "ERROR", "responce": "[] nextlongarray(int n) throws ioexception {\n            long[] arr = new long[n];\n            for (int i = 0; i < n; i++)\n                arr[i] = nextlong();\n            return arr;\n        }\n        public long[][] nextlongarray(int n, int m) throws ioexception {\n            long[][] arr = new long[n][m];\n            for (int i = 0; i < n; i++)\n                for (int j = 0; j < m; j++)\n                    arr[i][j] = nextlong();\n            return arr;\n        }\n    }\t\n}\n\n----------------------------------------\njson output format should be\n{\n    \"complexity\": time complexity of the whole code,\n}.\n\ncomplexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "NO RESPONCE", "responce": "1,    709,    719,    727,    733,\n                739,    743,    751,    757,    761,    769,    773,    787,    797,    809,\n                811,    821,    823,    827,    829,    839,    853,    857,    859,    863,\n                877,    881,    883,    887,    907,    911,    919,    929,    937,    941,\n                947,    953,    967,    971,    977,    983,    991,    997,   "}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "ERROR", "responce": "}\n----------------------------------------\njson output format should be\n{\n    \"complexity\": time complexity of the whole code,\n}.\n\ncomplexity: logn"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "NO RESPONCE", "responce": " if (iscomp[i]) {\n                    euler[i] = i - 1;\n                } else {\n                    euler[i] = i;\n                }\n            }\n            for (int i = 2; i <= limit; i++) {\n                if (euler[i] == i) {\n                    for (int j = i; j <= limit; j += i) {\n                        euler[j] = (int) ((euler[j] * i) >> 1);\n                    }\n                }\n            }\n            return euler;\n        }\n\n        public int[] getmodinverse(int m) {\n            int[] r = new int[limit + 1];\n            r[1] = 1;\n            for (int i = 2; i <= limit; i++) {\n                r[i] = (int) ((r[m % i] * (m - m / i)) % m);\n            }\n            return r;\n        }\n\n        public int[] getexponentiation(int m) {\n            int[] r = new int[limit + 1];\n            r[1] = 1;\n            for (int i = 2; i <= limit; i++) {\n                r[i] = (int) ((r[m"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "ERROR", "responce": " format should be\n{\n    \"complexity\": time complexity of the whole code,\n}.\n\ncomplexity: logn"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "NO RESPONCE", "responce": "\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tprev+=long.parselong(s.substring(j,j+update));\n\t\t\t\tj+=update;\n\t\t\t}\n\t\t\tif(prev >= long.parselong(s)) {\n\t\t\t\tval=i;\n\t\t\t}\n\t\t}\n\t\tif(val == -1) {\n\t\t\treturn \"-1\";\n\t\t}\n\t\tint j=0;\n\t\tlong prev=long.parselong(s.substring(0, val)),next=long.parselong(s.substring(val));\n\t\tstring res=long.tostring(prev);\n\t\tlong prev1=long.parselong(res);\n\t\tlong ans=long.parselong(s);\n\t\tlong next1=next+1;\n\t\t\n\t\twhile(prev1<=ans) {\n\t\t\tprev1+=next1;\n\t\t\tres+=long.tostring(next1);\n\t\t\tnext1++;\n\t\t}\n\t\tif(res.length() == 0) {\n\t\t\treturn \"-1\";\n\t\t}\n\t\tif(res.length() < s.length()) {\n\t\t\treturn res;\n\t\t}\n\t\treturn long.tostring(prev);\n\t}\n\n\tprivate static int numdigit(long l) {\n\t\tif(l<10) {\n\t\t\treturn 1;\n\t\t}\n\t\tif(l<100) {\n\t\t\treturn 2;\n\t\t}\n\t\tif(l<1"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "NO RESPONCE", "responce": " 1;\n\t            long arr[] = new long[end - start + 1];\n\t            // system.out.println(start+\" \"+mid+\" \"+end);\n\t            for (int i = 0; i < arr.length; i++) {\n\t                if (p > mid) {\n\t                    arr[i] = a[q++];\n\t                } else if (q > end) {\n\t                    arr[i] = a[p++];\n\t                } else {\n\t                    if (a[p] < a[q]) {\n\t                        arr[i] = a[p++];\n\t                    } else {\n\t                        arr[i] = a[q++];\n\t                    }\n\t                }\n\t            }\n\t            for (int i = 0; i < arr.length; i++) {\n\t                a[(int) (start + i)] = arr[i];\n\t            }\n\t        }\n\t        public static void swap(char a[][], int i, int j, int k, int l) {\n\t            char ch = a[i][j];\n\t            a[i][j] = a[k][l];\n\t            a[k][l] = ch;\n\t        }\n\t        public static int swap(int a[], int i, int j) {\n\t            int ch = a[i];\n\t            a[i] = a[j];\n"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": "n & 1) == 0) return false;\n        for (int j = 3; j < sqrt(n) + 1; j += 2){\n            if (n % j == 0) return false;\n        }\n        return true;\n    }\n\n    static int[] sieve(int n){\n        boolean[] b = new boolean[n + 1];\n        arrays.fill(b, true);\n        b[0] = false;\n        b[1] = false;\n        long nlong = n;\n        int res = 0;\n        for (int i = 2; i <= n; i++){\n            if (b[i]){\n                res++;\n                if (((long)i)*i <= nlong) {\n                    for (int j = i * i; j <= n; j += i) {\n                        b[j] = false;\n                    }\n                }\n            }\n        }\n        int[] p = new int[res];\n        for (int i = 0, j = 2; i < res; i++){\n            if (b[j]){\n                p[i] = j;\n                j++;\n            }\n        }\n        return p;\n    }\n    \n    static int[] sievediv(int n){\n        boolean[]"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "NO RESPONCE", "responce": "719,    727,    733,\n                739,    743,    751,    757,    761,    769,    773,    787,    797,    809,\n                811,    821,    823,    827,    829,    839,    853,    857,    859,    863,\n                877,    881,    883,    887,    907,    911,    919,    929,    937,    941,\n                947,    953,    967,    971,    977,    983,    991,    997,   1009,   101"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": "7,    163,    167,    173,\n                179,    181,    191,    193,    197,    199,    211,    223,    227,    229,\n                233,    239,    241,    251,    257,    263,    269,    271,    277,    281,\n                283,    293,    307,    311,    313,    317,    331,    337,    347,    349,\n                353,    359,    367,    373,    379,    383,    389,    397,    401,    "}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "NO RESPONCE", "responce": "+1];\n          for(int i=2;i<=n;i++) {\n                if(pr[i])continue;\n                k[i]=1;\n                for(int j=2*i;j<=n;j+=i) {\n                      pr[j]=true;\n                }\n          }\n          return k;\n    }\n    long gcd(long a, long b) {\n\t\tif (b == 0)\n\t\t\treturn a;\n\t\treturn gcd(b, a % b);\n\t}\n    long lcm(long a, long b) {\n        return (a * b) / gcd(a, b);\n    }\n    int gcd(int a, int b) {\n\t\tif (b == 0)\n\t\t\treturn a;\n\t\treturn gcd(b, a % b);\n\t}\n    int lcm(int a, int b) {\n        return (a * b) / gcd(a, b);\n    }\n    public static long lowerbound(long[] array, int length, long value) {\n        int low = 0;\n        int high = length;\n        while (low < high) {\n            final int mid = (low + high) / 2;\n            //checks if the value is less than middle element of the array\n            if (value"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "NO RESPONCE", "responce": "10;\n            if (l >= 100000000) return 9;\n            if (l >= 10000000) return 8;\n            if (l >= 1000000) return 7;\n            if (l >= 100000) return 6;\n            if (l >= 10000) return 5;\n            if (l >= 1000) return 4;\n            if (l >= 100) return 3;\n            if (l >= 10) return 2;\n            return 1;\n        }\n\n        private fastwriter write(int x) {\n            if (x == integer.min_value) {\n                return write((long) x);\n            }\n            if (isfirst) {\n                isfirst = false;\n            } else {\n                write(' ');\n            }\n            int d = countdigits(x);\n            for (int i = ptr + d - 1; i >= ptr; i--) {\n                buf[i] = (byte) ('0' + x % 10);\n                x /= 10;\n            }\n            ptr = i + 1"}
{"answer": " nlogn", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "NO RESPONCE", "responce": "                            answer += ((x * dp2[0][0][k][t - s]) % mod);\n                            answer %= mod;\n                        }\n            out.println(answer);\n        }\n\n    }\n\n    static class outputwriter {\n        private final printwriter writer;\n\n        public outputwriter(outputstream outputstream) {\n            writer = new printwriter(new bufferedwriter(new outputstreamwriter(outputstream)));\n        }\n\n        public outputwriter(writer writer) {\n            this.writer = new printwriter(writer);\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n        public void println(long i) {\n            writer.println(i);\n        }\n\n    }\n\n    static class inputreader {\n        private inputstream stream;\n        private byte[] buf = new byte[1024];\n        private int curchar;\n        private int numchars;\n        private inputreader.spacecharfilter filter;\n\n        public inputreader(inputstream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numchars == -1) {\n                throw new inputmismatchexception();\n            }\n            if (curchar >= numchars) {\n                curchar = 0;\n                try {\n                    numchars = stream.read(buf);\n                } catch (ioexception"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": " n < len(self.invfactorial_):\n            return self.invfactorial_[n]\n        self.inv(n)  # to make sure already calculated n^-1\n        nextarr = [0] * (n + 1 - len(self.invfactorial_))\n        initiali = len(self.invfactorial_)\n        prev = self.invfactorial_[-1]\n        p = self.mod\n        for i in range(initiali, n + 1):\n            prev = nextarr[i - initiali] = (prev * self.invmodulos[i % p]) % p\n        self.invfactorial_ += nextarr\n        return self.invfactorial_[n]\n \n \nclass combination:\n    def __init__(self, mod):\n        self.mod = mod\n        self.factorial = factorial(mod)\n \n    def ncr(self, n, k):\n        if k < 0 or n < k:\n            return 0\n        k = min(k, n - k)\n        f = self.factorial\n        return f.calc(n) * f.invfactorial(max(n - k, k)) * f.invfactorial"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "NO RESPONCE", "responce": "\n \n    def bisect_right(self, value):\n        \"\"\"return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n \n    def count(self, value):\n        \"\"\"return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n \n    def __len__(self):\n        \"\"\"return the size of the sorted list.\"\"\"\n        return self._len\n \n    def __getitem__(self, index):\n        \"\"\"lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n \n    def __delitem__(self, index):\n        \"\"\"remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n \n    def __contains__(self, value):\n        \"\"\"return true if `value` is an element of the sorted list.\"\"\"\n"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "NO RESPONCE", "responce": "orial_):\n            return self.invfactorial_[n]\n        self.inv(n)  # to make sure already calculated n^-1\n        nextarr = [0] * (n + 1 - len(self.invfactorial_))\n        initiali = len(self.invfactorial_)\n        prev = self.invfactorial_[-1]\n        p = self.mod\n        for i in range(initiali, n + 1):\n            prev = nextarr[i - initiali] = (prev * self.invmodulos[i % p]) % p\n        self.invfactorial_ += nextarr\n        return self.invfactorial_[n]\n \n \nclass combination:\n    def __init__(self, mod):\n        self.mod = mod\n        self.factorial = factorial(mod)\n \n    def ncr(self, n, k):\n        if k < 0 or n < k:\n            return 0\n        k = min(k, n - k)\n        f = self.factorial\n        return f.calc(n) * f.invfactorial(max(n - k, k)) * f.invfactorial(min(k, n - k))"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "NO RESPONCE", "responce": "vfactorial_)\n        prev = self.invfactorial_[-1]\n        p = self.mod\n        for i in range(initiali, n + 1):\n            prev = nextarr[i - initiali] = (prev * self.invmodulos[i % p]) % p\n        self.invfactorial_ += nextarr\n        return self.invfactorial_[n]\n\n\nclass combination:\n    def __init__(self, mod):\n        self.mod = mod\n        self.factorial = factorial(mod)\n\n    def ncr(self, n, k):\n        if k < 0 or n < k:\n            return 0\n        k = min(k, n - k)\n        f = self.factorial\n        return f.calc(n) * f.invfactorial(max(n - k, k)) * f.invfactorial(min(k, n - k)) % self.mod\n\n\n# ------------------------------------------------------binary seacrh tree---------------------------------\nclass segmenttree:\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func"}
{"answer": " constant", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " quadratic", "complexity": "NO RESPONCE", "responce": " true\n        self.edge = [[] for i in range(n)]\n\n    def dfs(self,v,pv):\n        stack = [(v,pv)]\n        new_parent = self.parent[pv]\n        while stack:\n            v,pv = stack.pop()\n            self.parent[v] = new_parent\n            for nv,w in self.edge[v]:\n                if nv!=pv:\n                    self.val[nv] = self.val[v] + w\n                    stack.append((nv,v))\n\n    def unite(self,x,y,w):\n        if not self.flag:\n            return\n        if self.parent[x]==self.parent[y]:\n            self.flag = (self.val[x] - self.val[y] == w)\n            return\n\n        if self.size[self.parent[x]]>self.size[self.parent[y]]:\n            self.edge[x].append((y,-w))\n            self.edge[y].append((x,w))\n            self.size[x] += self.size[y]\n            self.val[y] = self.val[x] - w\n            self.dfs(y,x)\n        else:\n            self.edge[x].append((y,-w))\n            self.edge[y].append((x,w))\n            self.size[y] += self.size[x]\n           "}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " cubic", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " np", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " nlogn", "complexity": "cubic", "responce": "complexity: cubic"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " quadratic", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " linear", "complexity": "quadratic", "responce": "complexity: quadratic"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " nlogn", "complexity": "nlogn", "responce": "complexity: nlogn"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " np", "complexity": "exponential", "responce": "complexity: np"}
{"answer": " linear", "complexity": "linear", "responce": "complexity: linear"}
{"answer": " constant", "complexity": "constant", "responce": "complexity: constant"}
{"answer": " logn", "complexity": "logn", "responce": "complexity: logn"}
